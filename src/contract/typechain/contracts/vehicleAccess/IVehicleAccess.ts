/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IBaseContract {
  export type VehicleOwnershipRecordStruct = {
    driverLicenseCode: PromiseOrValue<string>;
    federalUnit: PromiseOrValue<string>;
    county: PromiseOrValue<string>;
    vehiclePlate: PromiseOrValue<string>;
    year: PromiseOrValue<string>;
    startDate: PromiseOrValue<BigNumberish>;
    endDate: PromiseOrValue<BigNumberish>;
  };

  export type VehicleOwnershipRecordStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    driverLicenseCode: string;
    federalUnit: string;
    county: string;
    vehiclePlate: string;
    year: string;
    startDate: BigNumber;
    endDate: BigNumber;
  };

  export type AccessStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    expirationDate: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type AccessStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenId: BigNumber;
    expirationDate: BigNumber;
    updatedAt: BigNumber;
    createdAt: BigNumber;
  };

  export type VehicleRequestDataStruct = {
    carBrand: PromiseOrValue<string>;
    carModel: PromiseOrValue<string>;
    manufacturingDate: PromiseOrValue<BigNumberish>;
    vehicleOwnershipRecordIds: PromiseOrValue<BigNumberish>[];
  };

  export type VehicleRequestDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber[]
  ] & {
    carBrand: string;
    carModel: string;
    manufacturingDate: BigNumber;
    vehicleOwnershipRecordIds: BigNumber[];
  };

  export type VehicleRequestStruct = {
    requester: PromiseOrValue<string>;
    agent: PromiseOrValue<string>;
    vehicleRegistrationCode: PromiseOrValue<string>;
    vehicleData: IBaseContract.VehicleRequestDataStruct;
    status: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type VehicleRequestStructOutput = [
    string,
    string,
    string,
    IBaseContract.VehicleRequestDataStructOutput,
    number,
    BigNumber,
    BigNumber
  ] & {
    requester: string;
    agent: string;
    vehicleRegistrationCode: string;
    vehicleData: IBaseContract.VehicleRequestDataStructOutput;
    status: number;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type VehicleAccidentRecordStruct = {
    vehicleOwner: PromiseOrValue<string>;
    insurer: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    insuranceId: PromiseOrValue<BigNumberish>;
    description: PromiseOrValue<string>;
    accidentDate: PromiseOrValue<BigNumberish>;
    vehicleServicesIds: PromiseOrValue<BigNumberish>[];
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type VehicleAccidentRecordStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber[],
    BigNumber,
    BigNumber
  ] & {
    vehicleOwner: string;
    insurer: string;
    tokenId: BigNumber;
    insuranceId: BigNumber;
    description: string;
    accidentDate: BigNumber;
    vehicleServicesIds: BigNumber[];
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type VehicleInsuranceContractStruct = {
    requester: PromiseOrValue<string>;
    insurer: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    contractUrl: PromiseOrValue<string>;
    insuranceStartDate: PromiseOrValue<BigNumberish>;
    insuranceEndDate: PromiseOrValue<BigNumberish>;
    vehicleServicesIds: PromiseOrValue<BigNumberish>[];
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type VehicleInsuranceContractStructOutput = [
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber,
    BigNumber
  ] & {
    requester: string;
    insurer: string;
    tokenId: BigNumber;
    contractUrl: string;
    insuranceStartDate: BigNumber;
    insuranceEndDate: BigNumber;
    vehicleServicesIds: BigNumber[];
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type VehicleInsuranceProposalStruct = {
    requester: PromiseOrValue<string>;
    insurer: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    insuranceStartDate: PromiseOrValue<BigNumberish>;
    insuranceEndDate: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    contractUrl: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type VehicleInsuranceProposalStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    BigNumber,
    BigNumber
  ] & {
    requester: string;
    insurer: string;
    tokenId: BigNumber;
    insuranceStartDate: BigNumber;
    insuranceEndDate: BigNumber;
    price: BigNumber;
    contractUrl: string;
    status: number;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type VehicleInsuranceRequestStruct = {
    requester: PromiseOrValue<string>;
    insurer: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type VehicleInsuranceRequestStructOutput = [
    string,
    string,
    BigNumber,
    number,
    BigNumber,
    BigNumber
  ] & {
    requester: string;
    insurer: string;
    tokenId: BigNumber;
    status: number;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type VehicleServiceRecordStruct = {
    requester: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    title: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    date: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type VehicleServiceRecordStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    requester: string;
    tokenId: BigNumber;
    title: string;
    description: string;
    price: BigNumber;
    date: BigNumber;
    createdAt: BigNumber;
  };
}

export declare namespace INFT {
  export type MetadataVehicleNFTStruct = {
    vehicleRegistrationCode: PromiseOrValue<string>;
    carBrand: PromiseOrValue<string>;
    carModel: PromiseOrValue<string>;
    manufacturingDate: PromiseOrValue<BigNumberish>;
    vehicleOwnershipRecordIds: PromiseOrValue<BigNumberish>[];
  };

  export type MetadataVehicleNFTStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber[]
  ] & {
    vehicleRegistrationCode: string;
    carBrand: string;
    carModel: string;
    manufacturingDate: BigNumber;
    vehicleOwnershipRecordIds: BigNumber[];
  };
}

export interface IVehicleAccessInterface extends utils.Interface {
  functions: {
    "addVehicleServiceRecord(uint256,string,string,uint256,uint256)": FunctionFragment;
    "agentDeactivation(address)": FunctionFragment;
    "agentRegistration(address)": FunctionFragment;
    "approveVehicleRequest(uint256,string,string,uint256,(string,string,string,string,string,uint256,uint256)[])": FunctionFragment;
    "contractVehicleInsuranceProposal(uint256)": FunctionFragment;
    "createVehicle(uint256)": FunctionFragment;
    "createVehicleInsuranceProposal(uint256,uint256,uint256,uint256,string)": FunctionFragment;
    "createVehicleInsuranceRequest(uint256,address)": FunctionFragment;
    "createVehicleRequest(address,string)": FunctionFragment;
    "defineDriverLicenseCode(string)": FunctionFragment;
    "driverLicenseCodeOf(address)": FunctionFragment;
    "getAccessByTokenId(uint256,address)": FunctionFragment;
    "getDriverLicenseCode()": FunctionFragment;
    "getUserVehicleRequestById(uint256)": FunctionFragment;
    "getVehicleAccidentRecordById(uint256)": FunctionFragment;
    "getVehicleAccidentRecordIdsByTokenId(uint256)": FunctionFragment;
    "getVehicleInsuranceContractById(uint256)": FunctionFragment;
    "getVehicleInsuranceContractIdsByInsurer()": FunctionFragment;
    "getVehicleInsuranceContractIdsByInsurerAndTokenId(uint256)": FunctionFragment;
    "getVehicleInsuranceContractIdsByTokenId(uint256)": FunctionFragment;
    "getVehicleInsuranceProposalById(uint256)": FunctionFragment;
    "getVehicleInsuranceProposalIdsByInsurer()": FunctionFragment;
    "getVehicleInsuranceProposalIdsByTokenId(uint256)": FunctionFragment;
    "getVehicleInsuranceRequestById(uint256)": FunctionFragment;
    "getVehicleInsuranceRequestIdsByInsurer()": FunctionFragment;
    "getVehicleInsuranceRequestIdsByTokenId(uint256)": FunctionFragment;
    "getVehicleNFTMetadataByTokenId(uint256)": FunctionFragment;
    "getVehicleOwnershipRecordById(uint256,uint256)": FunctionFragment;
    "getVehicleRequestById(uint256)": FunctionFragment;
    "getVehicleServiceRecordById(uint256)": FunctionFragment;
    "getVehicleServiceRecordIdsByTokenId(uint256)": FunctionFragment;
    "giveVehicleAccessByTokenId(uint256,address,uint256)": FunctionFragment;
    "insurerAddVehicleServiceRecord(uint256,uint256,uint256,string,string,uint256,uint256)": FunctionFragment;
    "insurerDeactivation(address)": FunctionFragment;
    "insurerRegistration(address)": FunctionFragment;
    "listAccessByTokenId(uint256)": FunctionFragment;
    "listAgents()": FunctionFragment;
    "listApprovalsIds()": FunctionFragment;
    "listInsurers()": FunctionFragment;
    "listUserVehicleRequestsIds()": FunctionFragment;
    "listVehicleRequestsIds()": FunctionFragment;
    "registerVehicleAccidentRecord(uint256,uint256,string,uint256)": FunctionFragment;
    "revokeVehicleAccessByTokenId(uint256,address)": FunctionFragment;
    "userRegistration(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addVehicleServiceRecord"
      | "agentDeactivation"
      | "agentRegistration"
      | "approveVehicleRequest"
      | "contractVehicleInsuranceProposal"
      | "createVehicle"
      | "createVehicleInsuranceProposal"
      | "createVehicleInsuranceRequest"
      | "createVehicleRequest"
      | "defineDriverLicenseCode"
      | "driverLicenseCodeOf"
      | "getAccessByTokenId"
      | "getDriverLicenseCode"
      | "getUserVehicleRequestById"
      | "getVehicleAccidentRecordById"
      | "getVehicleAccidentRecordIdsByTokenId"
      | "getVehicleInsuranceContractById"
      | "getVehicleInsuranceContractIdsByInsurer"
      | "getVehicleInsuranceContractIdsByInsurerAndTokenId"
      | "getVehicleInsuranceContractIdsByTokenId"
      | "getVehicleInsuranceProposalById"
      | "getVehicleInsuranceProposalIdsByInsurer"
      | "getVehicleInsuranceProposalIdsByTokenId"
      | "getVehicleInsuranceRequestById"
      | "getVehicleInsuranceRequestIdsByInsurer"
      | "getVehicleInsuranceRequestIdsByTokenId"
      | "getVehicleNFTMetadataByTokenId"
      | "getVehicleOwnershipRecordById"
      | "getVehicleRequestById"
      | "getVehicleServiceRecordById"
      | "getVehicleServiceRecordIdsByTokenId"
      | "giveVehicleAccessByTokenId"
      | "insurerAddVehicleServiceRecord"
      | "insurerDeactivation"
      | "insurerRegistration"
      | "listAccessByTokenId"
      | "listAgents"
      | "listApprovalsIds"
      | "listInsurers"
      | "listUserVehicleRequestsIds"
      | "listVehicleRequestsIds"
      | "registerVehicleAccidentRecord"
      | "revokeVehicleAccessByTokenId"
      | "userRegistration"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addVehicleServiceRecord",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "agentDeactivation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "agentRegistration",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveVehicleRequest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IBaseContract.VehicleOwnershipRecordStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contractVehicleInsuranceProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createVehicle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createVehicleInsuranceProposal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createVehicleInsuranceRequest",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createVehicleRequest",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "defineDriverLicenseCode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "driverLicenseCodeOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessByTokenId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDriverLicenseCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVehicleRequestById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleAccidentRecordById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleAccidentRecordIdsByTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleInsuranceContractById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleInsuranceContractIdsByInsurer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleInsuranceContractIdsByInsurerAndTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleInsuranceContractIdsByTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleInsuranceProposalById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleInsuranceProposalIdsByInsurer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleInsuranceProposalIdsByTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleInsuranceRequestById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleInsuranceRequestIdsByInsurer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleInsuranceRequestIdsByTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleNFTMetadataByTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleOwnershipRecordById",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleRequestById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleServiceRecordById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleServiceRecordIdsByTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "giveVehicleAccessByTokenId",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "insurerAddVehicleServiceRecord",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "insurerDeactivation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "insurerRegistration",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listAccessByTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "listAgents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listApprovalsIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listInsurers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listUserVehicleRequestsIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listVehicleRequestsIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerVehicleAccidentRecord",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVehicleAccessByTokenId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userRegistration",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addVehicleServiceRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentDeactivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveVehicleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVehicleInsuranceProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVehicle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVehicleInsuranceProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVehicleInsuranceRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVehicleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defineDriverLicenseCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "driverLicenseCodeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccessByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDriverLicenseCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVehicleRequestById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleAccidentRecordById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleAccidentRecordIdsByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleInsuranceContractById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleInsuranceContractIdsByInsurer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleInsuranceContractIdsByInsurerAndTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleInsuranceContractIdsByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleInsuranceProposalById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleInsuranceProposalIdsByInsurer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleInsuranceProposalIdsByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleInsuranceRequestById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleInsuranceRequestIdsByInsurer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleInsuranceRequestIdsByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleNFTMetadataByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleOwnershipRecordById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleRequestById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleServiceRecordById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleServiceRecordIdsByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveVehicleAccessByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insurerAddVehicleServiceRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insurerDeactivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insurerRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listAccessByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listAgents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listApprovalsIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listInsurers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listUserVehicleRequestsIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listVehicleRequestsIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVehicleAccidentRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeVehicleAccessByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRegistration",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IVehicleAccess extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVehicleAccessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    agentDeactivation(
      agentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    agentRegistration(
      agentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveVehicleRequest(
      requestId: PromiseOrValue<BigNumberish>,
      carBrand: PromiseOrValue<string>,
      carModel: PromiseOrValue<string>,
      manufacturingDate: PromiseOrValue<BigNumberish>,
      ownershipRecords: IBaseContract.VehicleOwnershipRecordStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractVehicleInsuranceProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVehicle(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVehicleInsuranceProposal(
      requestId: PromiseOrValue<BigNumberish>,
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      contractUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVehicleInsuranceRequest(
      tokenId: PromiseOrValue<BigNumberish>,
      insurer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVehicleRequest(
      agent: PromiseOrValue<string>,
      vehicleRegistrationCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defineDriverLicenseCode(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    driverLicenseCodeOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { driverLicenseCode: string }>;

    getAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      fromAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IBaseContract.AccessStructOutput]>;

    getDriverLicenseCode(
      overrides?: CallOverrides
    ): Promise<[string] & { driverLicenseCode: string }>;

    getUserVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IBaseContract.VehicleRequestStructOutput]>;

    getVehicleAccidentRecordById(
      accidentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IBaseContract.VehicleAccidentRecordStructOutput]>;

    getVehicleAccidentRecordIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVehicleInsuranceContractById(
      insuranceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IBaseContract.VehicleInsuranceContractStructOutput]>;

    getVehicleInsuranceContractIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVehicleInsuranceContractIdsByInsurerAndTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVehicleInsuranceContractIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVehicleInsuranceProposalById(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IBaseContract.VehicleInsuranceProposalStructOutput]>;

    getVehicleInsuranceProposalIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVehicleInsuranceProposalIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVehicleInsuranceRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IBaseContract.VehicleInsuranceRequestStructOutput]>;

    getVehicleInsuranceRequestIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVehicleInsuranceRequestIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVehicleNFTMetadataByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[INFT.MetadataVehicleNFTStructOutput]>;

    getVehicleOwnershipRecordById(
      tokenId: PromiseOrValue<BigNumberish>,
      ownershipId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IBaseContract.VehicleOwnershipRecordStructOutput]>;

    getVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IBaseContract.VehicleRequestStructOutput]>;

    getVehicleServiceRecordById(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IBaseContract.VehicleServiceRecordStructOutput]>;

    getVehicleServiceRecordIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    giveVehicleAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      toAddress: PromiseOrValue<string>,
      expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insurerAddVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      accidentId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insurerDeactivation(
      insurerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insurerRegistration(
      insurerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    listAgents(overrides?: CallOverrides): Promise<[string[]]>;

    listApprovalsIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    listInsurers(overrides?: CallOverrides): Promise<[string[]]>;

    listUserVehicleRequestsIds(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    listVehicleRequestsIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    registerVehicleAccidentRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      accidentDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeVehicleAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      toAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userRegistration(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addVehicleServiceRecord(
    tokenId: PromiseOrValue<BigNumberish>,
    title: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    date: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  agentDeactivation(
    agentAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  agentRegistration(
    agentAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveVehicleRequest(
    requestId: PromiseOrValue<BigNumberish>,
    carBrand: PromiseOrValue<string>,
    carModel: PromiseOrValue<string>,
    manufacturingDate: PromiseOrValue<BigNumberish>,
    ownershipRecords: IBaseContract.VehicleOwnershipRecordStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractVehicleInsuranceProposal(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVehicle(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVehicleInsuranceProposal(
    requestId: PromiseOrValue<BigNumberish>,
    startDate: PromiseOrValue<BigNumberish>,
    endDate: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    contractUrl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVehicleInsuranceRequest(
    tokenId: PromiseOrValue<BigNumberish>,
    insurer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVehicleRequest(
    agent: PromiseOrValue<string>,
    vehicleRegistrationCode: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defineDriverLicenseCode(
    driverLicenseCode: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  driverLicenseCodeOf(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAccessByTokenId(
    tokenId: PromiseOrValue<BigNumberish>,
    fromAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IBaseContract.AccessStructOutput>;

  getDriverLicenseCode(overrides?: CallOverrides): Promise<string>;

  getUserVehicleRequestById(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IBaseContract.VehicleRequestStructOutput>;

  getVehicleAccidentRecordById(
    accidentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IBaseContract.VehicleAccidentRecordStructOutput>;

  getVehicleAccidentRecordIdsByTokenId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVehicleInsuranceContractById(
    insuranceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IBaseContract.VehicleInsuranceContractStructOutput>;

  getVehicleInsuranceContractIdsByInsurer(
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVehicleInsuranceContractIdsByInsurerAndTokenId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVehicleInsuranceContractIdsByTokenId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVehicleInsuranceProposalById(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IBaseContract.VehicleInsuranceProposalStructOutput>;

  getVehicleInsuranceProposalIdsByInsurer(
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVehicleInsuranceProposalIdsByTokenId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVehicleInsuranceRequestById(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IBaseContract.VehicleInsuranceRequestStructOutput>;

  getVehicleInsuranceRequestIdsByInsurer(
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVehicleInsuranceRequestIdsByTokenId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVehicleNFTMetadataByTokenId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<INFT.MetadataVehicleNFTStructOutput>;

  getVehicleOwnershipRecordById(
    tokenId: PromiseOrValue<BigNumberish>,
    ownershipId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IBaseContract.VehicleOwnershipRecordStructOutput>;

  getVehicleRequestById(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IBaseContract.VehicleRequestStructOutput>;

  getVehicleServiceRecordById(
    serviceId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IBaseContract.VehicleServiceRecordStructOutput>;

  getVehicleServiceRecordIdsByTokenId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  giveVehicleAccessByTokenId(
    tokenId: PromiseOrValue<BigNumberish>,
    toAddress: PromiseOrValue<string>,
    expirationDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  insurerAddVehicleServiceRecord(
    tokenId: PromiseOrValue<BigNumberish>,
    insuranceId: PromiseOrValue<BigNumberish>,
    accidentId: PromiseOrValue<BigNumberish>,
    title: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    date: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  insurerDeactivation(
    insurerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  insurerRegistration(
    insurerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listAccessByTokenId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listAgents(overrides?: CallOverrides): Promise<string[]>;

  listApprovalsIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  listInsurers(overrides?: CallOverrides): Promise<string[]>;

  listUserVehicleRequestsIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  listVehicleRequestsIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  registerVehicleAccidentRecord(
    tokenId: PromiseOrValue<BigNumberish>,
    insuranceId: PromiseOrValue<BigNumberish>,
    description: PromiseOrValue<string>,
    accidentDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeVehicleAccessByTokenId(
    tokenId: PromiseOrValue<BigNumberish>,
    toAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userRegistration(
    driverLicenseCode: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    agentDeactivation(
      agentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    agentRegistration(
      agentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveVehicleRequest(
      requestId: PromiseOrValue<BigNumberish>,
      carBrand: PromiseOrValue<string>,
      carModel: PromiseOrValue<string>,
      manufacturingDate: PromiseOrValue<BigNumberish>,
      ownershipRecords: IBaseContract.VehicleOwnershipRecordStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    contractVehicleInsuranceProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createVehicle(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createVehicleInsuranceProposal(
      requestId: PromiseOrValue<BigNumberish>,
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      contractUrl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createVehicleInsuranceRequest(
      tokenId: PromiseOrValue<BigNumberish>,
      insurer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createVehicleRequest(
      agent: PromiseOrValue<string>,
      vehicleRegistrationCode: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    defineDriverLicenseCode(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    driverLicenseCodeOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      fromAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IBaseContract.AccessStructOutput>;

    getDriverLicenseCode(overrides?: CallOverrides): Promise<string>;

    getUserVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IBaseContract.VehicleRequestStructOutput>;

    getVehicleAccidentRecordById(
      accidentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IBaseContract.VehicleAccidentRecordStructOutput>;

    getVehicleAccidentRecordIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVehicleInsuranceContractById(
      insuranceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IBaseContract.VehicleInsuranceContractStructOutput>;

    getVehicleInsuranceContractIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVehicleInsuranceContractIdsByInsurerAndTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVehicleInsuranceContractIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVehicleInsuranceProposalById(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IBaseContract.VehicleInsuranceProposalStructOutput>;

    getVehicleInsuranceProposalIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVehicleInsuranceProposalIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVehicleInsuranceRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IBaseContract.VehicleInsuranceRequestStructOutput>;

    getVehicleInsuranceRequestIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVehicleInsuranceRequestIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVehicleNFTMetadataByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<INFT.MetadataVehicleNFTStructOutput>;

    getVehicleOwnershipRecordById(
      tokenId: PromiseOrValue<BigNumberish>,
      ownershipId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IBaseContract.VehicleOwnershipRecordStructOutput>;

    getVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IBaseContract.VehicleRequestStructOutput>;

    getVehicleServiceRecordById(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IBaseContract.VehicleServiceRecordStructOutput>;

    getVehicleServiceRecordIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    giveVehicleAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      toAddress: PromiseOrValue<string>,
      expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    insurerAddVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      accidentId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    insurerDeactivation(
      insurerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    insurerRegistration(
      insurerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    listAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listAgents(overrides?: CallOverrides): Promise<string[]>;

    listApprovalsIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    listInsurers(overrides?: CallOverrides): Promise<string[]>;

    listUserVehicleRequestsIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    listVehicleRequestsIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    registerVehicleAccidentRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      accidentDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeVehicleAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      toAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userRegistration(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    agentDeactivation(
      agentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    agentRegistration(
      agentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveVehicleRequest(
      requestId: PromiseOrValue<BigNumberish>,
      carBrand: PromiseOrValue<string>,
      carModel: PromiseOrValue<string>,
      manufacturingDate: PromiseOrValue<BigNumberish>,
      ownershipRecords: IBaseContract.VehicleOwnershipRecordStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractVehicleInsuranceProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVehicle(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVehicleInsuranceProposal(
      requestId: PromiseOrValue<BigNumberish>,
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      contractUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVehicleInsuranceRequest(
      tokenId: PromiseOrValue<BigNumberish>,
      insurer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVehicleRequest(
      agent: PromiseOrValue<string>,
      vehicleRegistrationCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defineDriverLicenseCode(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    driverLicenseCodeOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      fromAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDriverLicenseCode(overrides?: CallOverrides): Promise<BigNumber>;

    getUserVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleAccidentRecordById(
      accidentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleAccidentRecordIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleInsuranceContractById(
      insuranceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleInsuranceContractIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleInsuranceContractIdsByInsurerAndTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleInsuranceContractIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleInsuranceProposalById(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleInsuranceProposalIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleInsuranceProposalIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleInsuranceRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleInsuranceRequestIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleInsuranceRequestIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleNFTMetadataByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleOwnershipRecordById(
      tokenId: PromiseOrValue<BigNumberish>,
      ownershipId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleServiceRecordById(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleServiceRecordIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    giveVehicleAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      toAddress: PromiseOrValue<string>,
      expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    insurerAddVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      accidentId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    insurerDeactivation(
      insurerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    insurerRegistration(
      insurerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listAgents(overrides?: CallOverrides): Promise<BigNumber>;

    listApprovalsIds(overrides?: CallOverrides): Promise<BigNumber>;

    listInsurers(overrides?: CallOverrides): Promise<BigNumber>;

    listUserVehicleRequestsIds(overrides?: CallOverrides): Promise<BigNumber>;

    listVehicleRequestsIds(overrides?: CallOverrides): Promise<BigNumber>;

    registerVehicleAccidentRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      accidentDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeVehicleAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      toAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userRegistration(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    agentDeactivation(
      agentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    agentRegistration(
      agentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveVehicleRequest(
      requestId: PromiseOrValue<BigNumberish>,
      carBrand: PromiseOrValue<string>,
      carModel: PromiseOrValue<string>,
      manufacturingDate: PromiseOrValue<BigNumberish>,
      ownershipRecords: IBaseContract.VehicleOwnershipRecordStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractVehicleInsuranceProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVehicle(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVehicleInsuranceProposal(
      requestId: PromiseOrValue<BigNumberish>,
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      contractUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVehicleInsuranceRequest(
      tokenId: PromiseOrValue<BigNumberish>,
      insurer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVehicleRequest(
      agent: PromiseOrValue<string>,
      vehicleRegistrationCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defineDriverLicenseCode(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    driverLicenseCodeOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      fromAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDriverLicenseCode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleAccidentRecordById(
      accidentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleAccidentRecordIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleInsuranceContractById(
      insuranceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleInsuranceContractIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleInsuranceContractIdsByInsurerAndTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleInsuranceContractIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleInsuranceProposalById(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleInsuranceProposalIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleInsuranceProposalIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleInsuranceRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleInsuranceRequestIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleInsuranceRequestIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleNFTMetadataByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleOwnershipRecordById(
      tokenId: PromiseOrValue<BigNumberish>,
      ownershipId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleServiceRecordById(
      serviceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleServiceRecordIdsByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    giveVehicleAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      toAddress: PromiseOrValue<string>,
      expirationDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    insurerAddVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      accidentId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    insurerDeactivation(
      insurerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    insurerRegistration(
      insurerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listAgents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listApprovalsIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listInsurers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listUserVehicleRequestsIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listVehicleRequestsIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerVehicleAccidentRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      accidentDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeVehicleAccessByTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      toAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userRegistration(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
