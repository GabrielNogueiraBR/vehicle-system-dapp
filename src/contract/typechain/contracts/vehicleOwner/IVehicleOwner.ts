/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IBaseContract {
  export type VehicleRequestDataStruct = {
    carBrand: PromiseOrValue<string>;
    carModel: PromiseOrValue<string>;
    manufacturingDate: PromiseOrValue<BigNumberish>;
    vehicleOwnershipRecordIds: PromiseOrValue<BigNumberish>[];
  };

  export type VehicleRequestDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber[]
  ] & {
    carBrand: string;
    carModel: string;
    manufacturingDate: BigNumber;
    vehicleOwnershipRecordIds: BigNumber[];
  };

  export type VehicleRequestStruct = {
    requester: PromiseOrValue<string>;
    agent: PromiseOrValue<string>;
    vehicleRegistrationCode: PromiseOrValue<string>;
    vehicleData: IBaseContract.VehicleRequestDataStruct;
    status: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type VehicleRequestStructOutput = [
    string,
    string,
    string,
    IBaseContract.VehicleRequestDataStructOutput,
    number,
    BigNumber,
    BigNumber
  ] & {
    requester: string;
    agent: string;
    vehicleRegistrationCode: string;
    vehicleData: IBaseContract.VehicleRequestDataStructOutput;
    status: number;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export interface IVehicleOwnerInterface extends utils.Interface {
  functions: {
    "addVehicleServiceRecord(uint256,string,string,uint256,uint256)": FunctionFragment;
    "contractVehicleInsuranceProposal(uint256)": FunctionFragment;
    "createVehicle(uint256)": FunctionFragment;
    "createVehicleInsuranceRequest(uint256,address)": FunctionFragment;
    "createVehicleRequest(address,string)": FunctionFragment;
    "defineDriverLicenseCode(string)": FunctionFragment;
    "driverLicenseCodeOf(address)": FunctionFragment;
    "getDriverLicenseCode()": FunctionFragment;
    "getUserVehicleRequestById(uint256)": FunctionFragment;
    "listApprovalsIds()": FunctionFragment;
    "listUserVehicleRequestsIds()": FunctionFragment;
    "userRegistration(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addVehicleServiceRecord"
      | "contractVehicleInsuranceProposal"
      | "createVehicle"
      | "createVehicleInsuranceRequest"
      | "createVehicleRequest"
      | "defineDriverLicenseCode"
      | "driverLicenseCodeOf"
      | "getDriverLicenseCode"
      | "getUserVehicleRequestById"
      | "listApprovalsIds"
      | "listUserVehicleRequestsIds"
      | "userRegistration"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addVehicleServiceRecord",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contractVehicleInsuranceProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createVehicle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createVehicleInsuranceRequest",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createVehicleRequest",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "defineDriverLicenseCode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "driverLicenseCodeOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDriverLicenseCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVehicleRequestById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "listApprovalsIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listUserVehicleRequestsIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userRegistration",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addVehicleServiceRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVehicleInsuranceProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVehicle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVehicleInsuranceRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVehicleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defineDriverLicenseCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "driverLicenseCodeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDriverLicenseCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVehicleRequestById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listApprovalsIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listUserVehicleRequestsIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRegistration",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IVehicleOwner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVehicleOwnerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractVehicleInsuranceProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVehicle(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVehicleInsuranceRequest(
      tokenId: PromiseOrValue<BigNumberish>,
      insurer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVehicleRequest(
      agent: PromiseOrValue<string>,
      vehicleRegistrationCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defineDriverLicenseCode(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    driverLicenseCodeOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { driverLicenseCode: string }>;

    getDriverLicenseCode(
      overrides?: CallOverrides
    ): Promise<[string] & { driverLicenseCode: string }>;

    getUserVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IBaseContract.VehicleRequestStructOutput]>;

    listApprovalsIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    listUserVehicleRequestsIds(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    userRegistration(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addVehicleServiceRecord(
    tokenId: PromiseOrValue<BigNumberish>,
    title: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    date: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractVehicleInsuranceProposal(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVehicle(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVehicleInsuranceRequest(
    tokenId: PromiseOrValue<BigNumberish>,
    insurer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVehicleRequest(
    agent: PromiseOrValue<string>,
    vehicleRegistrationCode: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defineDriverLicenseCode(
    driverLicenseCode: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  driverLicenseCodeOf(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDriverLicenseCode(overrides?: CallOverrides): Promise<string>;

  getUserVehicleRequestById(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IBaseContract.VehicleRequestStructOutput>;

  listApprovalsIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  listUserVehicleRequestsIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  userRegistration(
    driverLicenseCode: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    contractVehicleInsuranceProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createVehicle(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createVehicleInsuranceRequest(
      tokenId: PromiseOrValue<BigNumberish>,
      insurer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createVehicleRequest(
      agent: PromiseOrValue<string>,
      vehicleRegistrationCode: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    defineDriverLicenseCode(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    driverLicenseCodeOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDriverLicenseCode(overrides?: CallOverrides): Promise<string>;

    getUserVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IBaseContract.VehicleRequestStructOutput>;

    listApprovalsIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    listUserVehicleRequestsIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    userRegistration(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractVehicleInsuranceProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVehicle(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVehicleInsuranceRequest(
      tokenId: PromiseOrValue<BigNumberish>,
      insurer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVehicleRequest(
      agent: PromiseOrValue<string>,
      vehicleRegistrationCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defineDriverLicenseCode(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    driverLicenseCodeOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDriverLicenseCode(overrides?: CallOverrides): Promise<BigNumber>;

    getUserVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listApprovalsIds(overrides?: CallOverrides): Promise<BigNumber>;

    listUserVehicleRequestsIds(overrides?: CallOverrides): Promise<BigNumber>;

    userRegistration(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractVehicleInsuranceProposal(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVehicle(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVehicleInsuranceRequest(
      tokenId: PromiseOrValue<BigNumberish>,
      insurer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVehicleRequest(
      agent: PromiseOrValue<string>,
      vehicleRegistrationCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defineDriverLicenseCode(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    driverLicenseCodeOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDriverLicenseCode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listApprovalsIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listUserVehicleRequestsIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRegistration(
      driverLicenseCode: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
