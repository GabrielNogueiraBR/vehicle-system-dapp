/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IBaseContract {
  export type VehicleOwnershipRecordStruct = {
    driverLicenseCode: PromiseOrValue<string>;
    federalUnit: PromiseOrValue<string>;
    county: PromiseOrValue<string>;
    vehiclePlate: PromiseOrValue<string>;
    year: PromiseOrValue<string>;
    startDate: PromiseOrValue<BigNumberish>;
    endDate: PromiseOrValue<BigNumberish>;
  };

  export type VehicleOwnershipRecordStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    driverLicenseCode: string;
    federalUnit: string;
    county: string;
    vehiclePlate: string;
    year: string;
    startDate: BigNumber;
    endDate: BigNumber;
  };

  export type VehicleRequestDataStruct = {
    carBrand: PromiseOrValue<string>;
    carModel: PromiseOrValue<string>;
    manufacturingDate: PromiseOrValue<BigNumberish>;
    vehicleOwnershipRecordIds: PromiseOrValue<BigNumberish>[];
  };

  export type VehicleRequestDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber[]
  ] & {
    carBrand: string;
    carModel: string;
    manufacturingDate: BigNumber;
    vehicleOwnershipRecordIds: BigNumber[];
  };

  export type VehicleRequestStruct = {
    requester: PromiseOrValue<string>;
    agent: PromiseOrValue<string>;
    vehicleRegistrationCode: PromiseOrValue<string>;
    vehicleData: IBaseContract.VehicleRequestDataStruct;
    status: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type VehicleRequestStructOutput = [
    string,
    string,
    string,
    IBaseContract.VehicleRequestDataStructOutput,
    number,
    BigNumber,
    BigNumber
  ] & {
    requester: string;
    agent: string;
    vehicleRegistrationCode: string;
    vehicleData: IBaseContract.VehicleRequestDataStructOutput;
    status: number;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };
}

export interface InsurerContractInterface extends utils.Interface {
  functions: {
    "agentDeactivation(address)": FunctionFragment;
    "agentRegistration(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveVehicleRequest(uint256,string,string,uint256,(string,string,string,string,string,uint256,uint256)[])": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "createVehicleInsuranceProposal(uint256,uint256,uint256,uint256,string)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getVehicleInsuranceContractIdsByInsurer()": FunctionFragment;
    "getVehicleInsuranceRequestIdsByInsurer()": FunctionFragment;
    "getVehicleRequestById(uint256)": FunctionFragment;
    "insurerAddVehicleServiceRecord(uint256,uint256,uint256,string,string,uint256,uint256)": FunctionFragment;
    "insurerDeactivation(address)": FunctionFragment;
    "insurerRegistration(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "listAgents()": FunctionFragment;
    "listInsurers()": FunctionFragment;
    "listVehicleRequestsIds()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "registerVehicleAccidentRecord(uint256,uint256,string,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "agentDeactivation"
      | "agentRegistration"
      | "approve"
      | "approveVehicleRequest"
      | "balanceOf"
      | "createVehicleInsuranceProposal"
      | "getApproved"
      | "getVehicleInsuranceContractIdsByInsurer"
      | "getVehicleInsuranceRequestIdsByInsurer"
      | "getVehicleRequestById"
      | "insurerAddVehicleServiceRecord"
      | "insurerDeactivation"
      | "insurerRegistration"
      | "isApprovedForAll"
      | "listAgents"
      | "listInsurers"
      | "listVehicleRequestsIds"
      | "name"
      | "owner"
      | "ownerOf"
      | "registerVehicleAccidentRecord"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "agentDeactivation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "agentRegistration",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveVehicleRequest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IBaseContract.VehicleOwnershipRecordStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createVehicleInsuranceProposal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleInsuranceContractIdsByInsurer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleInsuranceRequestIdsByInsurer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVehicleRequestById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "insurerAddVehicleServiceRecord",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "insurerDeactivation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "insurerRegistration",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listAgents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listInsurers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listVehicleRequestsIds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVehicleAccidentRecord",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "agentDeactivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveVehicleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createVehicleInsuranceProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleInsuranceContractIdsByInsurer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleInsuranceRequestIdsByInsurer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVehicleRequestById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insurerAddVehicleServiceRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insurerDeactivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insurerRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listAgents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listInsurers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listVehicleRequestsIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerVehicleAccidentRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface InsurerContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InsurerContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    agentDeactivation(
      agentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    agentRegistration(
      agentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveVehicleRequest(
      requestId: PromiseOrValue<BigNumberish>,
      carBrand: PromiseOrValue<string>,
      carModel: PromiseOrValue<string>,
      manufacturingDate: PromiseOrValue<BigNumberish>,
      ownershipRecords: IBaseContract.VehicleOwnershipRecordStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createVehicleInsuranceProposal(
      requestId: PromiseOrValue<BigNumberish>,
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      contractUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVehicleInsuranceContractIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVehicleInsuranceRequestIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IBaseContract.VehicleRequestStructOutput]>;

    insurerAddVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      accidentId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insurerDeactivation(
      insurerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insurerRegistration(
      insurerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listAgents(overrides?: CallOverrides): Promise<[string[]]>;

    listInsurers(overrides?: CallOverrides): Promise<[string[]]>;

    listVehicleRequestsIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerVehicleAccidentRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      accidentDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  agentDeactivation(
    agentAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  agentRegistration(
    agentAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveVehicleRequest(
    requestId: PromiseOrValue<BigNumberish>,
    carBrand: PromiseOrValue<string>,
    carModel: PromiseOrValue<string>,
    manufacturingDate: PromiseOrValue<BigNumberish>,
    ownershipRecords: IBaseContract.VehicleOwnershipRecordStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createVehicleInsuranceProposal(
    requestId: PromiseOrValue<BigNumberish>,
    startDate: PromiseOrValue<BigNumberish>,
    endDate: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    contractUrl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVehicleInsuranceContractIdsByInsurer(
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVehicleInsuranceRequestIdsByInsurer(
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVehicleRequestById(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IBaseContract.VehicleRequestStructOutput>;

  insurerAddVehicleServiceRecord(
    tokenId: PromiseOrValue<BigNumberish>,
    insuranceId: PromiseOrValue<BigNumberish>,
    accidentId: PromiseOrValue<BigNumberish>,
    title: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    date: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  insurerDeactivation(
    insurerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  insurerRegistration(
    insurerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listAgents(overrides?: CallOverrides): Promise<string[]>;

  listInsurers(overrides?: CallOverrides): Promise<string[]>;

  listVehicleRequestsIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  registerVehicleAccidentRecord(
    tokenId: PromiseOrValue<BigNumberish>,
    insuranceId: PromiseOrValue<BigNumberish>,
    description: PromiseOrValue<string>,
    accidentDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    agentDeactivation(
      agentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    agentRegistration(
      agentAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveVehicleRequest(
      requestId: PromiseOrValue<BigNumberish>,
      carBrand: PromiseOrValue<string>,
      carModel: PromiseOrValue<string>,
      manufacturingDate: PromiseOrValue<BigNumberish>,
      ownershipRecords: IBaseContract.VehicleOwnershipRecordStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createVehicleInsuranceProposal(
      requestId: PromiseOrValue<BigNumberish>,
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      contractUrl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVehicleInsuranceContractIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVehicleInsuranceRequestIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IBaseContract.VehicleRequestStructOutput>;

    insurerAddVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      accidentId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    insurerDeactivation(
      insurerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    insurerRegistration(
      insurerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listAgents(overrides?: CallOverrides): Promise<string[]>;

    listInsurers(overrides?: CallOverrides): Promise<string[]>;

    listVehicleRequestsIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerVehicleAccidentRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      accidentDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
  };

  estimateGas: {
    agentDeactivation(
      agentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    agentRegistration(
      agentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveVehicleRequest(
      requestId: PromiseOrValue<BigNumberish>,
      carBrand: PromiseOrValue<string>,
      carModel: PromiseOrValue<string>,
      manufacturingDate: PromiseOrValue<BigNumberish>,
      ownershipRecords: IBaseContract.VehicleOwnershipRecordStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createVehicleInsuranceProposal(
      requestId: PromiseOrValue<BigNumberish>,
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      contractUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleInsuranceContractIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleInsuranceRequestIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insurerAddVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      accidentId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    insurerDeactivation(
      insurerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    insurerRegistration(
      insurerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listAgents(overrides?: CallOverrides): Promise<BigNumber>;

    listInsurers(overrides?: CallOverrides): Promise<BigNumber>;

    listVehicleRequestsIds(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerVehicleAccidentRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      accidentDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    agentDeactivation(
      agentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    agentRegistration(
      agentAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveVehicleRequest(
      requestId: PromiseOrValue<BigNumberish>,
      carBrand: PromiseOrValue<string>,
      carModel: PromiseOrValue<string>,
      manufacturingDate: PromiseOrValue<BigNumberish>,
      ownershipRecords: IBaseContract.VehicleOwnershipRecordStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createVehicleInsuranceProposal(
      requestId: PromiseOrValue<BigNumberish>,
      startDate: PromiseOrValue<BigNumberish>,
      endDate: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      contractUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleInsuranceContractIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleInsuranceRequestIdsByInsurer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVehicleRequestById(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insurerAddVehicleServiceRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      accidentId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      date: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    insurerDeactivation(
      insurerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    insurerRegistration(
      insurerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listAgents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listInsurers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listVehicleRequestsIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerVehicleAccidentRecord(
      tokenId: PromiseOrValue<BigNumberish>,
      insuranceId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      accidentDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
