/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IVehicleOwner,
  IVehicleOwnerInterface,
} from "../../../contracts/vehicleOwner/IVehicleOwner";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "date",
        type: "uint256",
      },
    ],
    name: "addVehicleServiceRecord",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "contractVehicleInsuranceProposal",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "createVehicle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "insurer",
        type: "address",
      },
    ],
    name: "createVehicleInsuranceRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "agent",
        type: "address",
      },
      {
        internalType: "string",
        name: "vehicleRegistrationCode",
        type: "string",
      },
    ],
    name: "createVehicleRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "driverLicenseCode",
        type: "string",
      },
    ],
    name: "defineDriverLicenseCode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "driverLicenseCodeOf",
    outputs: [
      {
        internalType: "string",
        name: "driverLicenseCode",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDriverLicenseCode",
    outputs: [
      {
        internalType: "string",
        name: "driverLicenseCode",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "getUserVehicleRequestById",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "requester",
            type: "address",
          },
          {
            internalType: "address",
            name: "agent",
            type: "address",
          },
          {
            internalType: "string",
            name: "vehicleRegistrationCode",
            type: "string",
          },
          {
            components: [
              {
                internalType: "string",
                name: "carBrand",
                type: "string",
              },
              {
                internalType: "string",
                name: "carModel",
                type: "string",
              },
              {
                internalType: "uint256",
                name: "manufacturingDate",
                type: "uint256",
              },
              {
                internalType: "uint256[]",
                name: "vehicleOwnershipRecordIds",
                type: "uint256[]",
              },
            ],
            internalType: "struct IBaseContract.VehicleRequestData",
            name: "vehicleData",
            type: "tuple",
          },
          {
            internalType: "enum IBaseContract.Status",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "updatedAt",
            type: "uint256",
          },
        ],
        internalType: "struct IBaseContract.VehicleRequest",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "listApprovalsIds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "listUserVehicleRequestsIds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "driverLicenseCode",
        type: "string",
      },
    ],
    name: "userRegistration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IVehicleOwner__factory {
  static readonly abi = _abi;
  static createInterface(): IVehicleOwnerInterface {
    return new utils.Interface(_abi) as IVehicleOwnerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IVehicleOwner {
    return new Contract(address, _abi, signerOrProvider) as IVehicleOwner;
  }
}
